import json
import os
import time
import datetime
import phonenumbers
from phonenumbers import carrier, geocoder
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dadata import DadataAsync, Dadata
import requests
import re
from db import Database

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã (–±–∞–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ stats)
db = Database('stats/database.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Dadata
token = 'dadatatoken'
secret = 'dadata secret'
dadata = DadataAsync(token, secret)
dadata_for_inn = Dadata(token)

LEAKOSINT_API_KEY = "6262648152:AEx1jTW8"

def send_reques(request_text):
    url = 'https://leakosintapi.com/'
    token = LEAKOSINT_API_KEY
    data = {
        "token": token,
        "request": request_text,
        "limit": 1000,
        "lang": "ru"
    }
    try:
        response = requests.post(url, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

def format_combined_response(response):
    # –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É
    field_mapping = {
        'PossibleNames': "–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞",
        'FullName': "–í–æ–∑–º–æ–∂–Ω–æ–µ –§–ò–û",
        'VkID': "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ",
        'BDay': "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        'Email': "Email",
        'FullName': "–ü–æ–ª–Ω–æ–µ –ò–º—è",
        'Age': "–í–æ–∑—Ä–∞—Å—Ç",
        'PointAddress': "–ê–¥—Ä–µ—Å—Å",
        'CreditCard': "–ú–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫",
        'NickName': "–ù–∏–∫",
        'Password(SHA-256)': "–ü–æ—Ä–æ–ª—å",
        'Tags': "–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞",
        'Snils': "–°–Ω–∏–ª—Å",
        'IP': "–ê–π–ø–∏",
        'Telegram': "Telegram",
        'TelegramGroups': "–ì—Ä—É–ø–ø—ã Telegram",
        'Registrations': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        'Interested': "–ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å",
        'Reputation': "–†–µ–ø—É—Ç–∞—Ü–∏—è"
    }
    emoji_mapping = {
        'PossibleNames': "üìì",
        'FullName': "üë§",
        'VkID': "üë®‚Äçüíª",
        'BDay': "üè•",
        'Email': "üì™",
        'FullName': "üë•",
        'Age': "üöë",
        'PointAddress': "üè†",
        'CreditCard': "üí≥",
        'NickName': "üìï",
        'Password(SHA-256)': "üìü",
        'Tags': "üìì",
        'Snils': "üîñ",
        'IP': "üñ•",
        'Telegram': "üìß",
        'TelegramGroups': "üë•",
        'Registrations': "üåê",
        'Interested': "üëÅ",
        'Reputation': "üèÖ"
    }
    aggregated = {}
    if response and 'List' in response:
        for db_name, db_info in response['List'].items():
            for entry in db_info.get('Data', []):
                for key, value in entry.items():
                    if key in field_mapping:
                        aggregated.setdefault(key, []).append(value)
        for key in aggregated:
            try:
                aggregated[key] = sorted(set(aggregated[key]))
            except Exception:
                aggregated[key] = list(set(aggregated[key]))
        formatted_str = ""
        for key in field_mapping:
            if key in aggregated:
                emoji = emoji_mapping.get(key, "")
                values_joined = ", ".join(str(v) for v in aggregated[key])
                formatted_str += f"{emoji} {field_mapping[key]}: {values_joined}\n"
        return formatted_str
    else:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

LIMITS_FILE = "search_limits.json"
SEARCH_LIMIT = 10

def load_search_limits():
    if os.path.exists(LIMITS_FILE):
        with open(LIMITS_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_search_limits(limits):
    with open(LIMITS_FILE, "w") as f:
        json.dump(limits, f, indent=4)

def check_search_limit(user_id):
    limits = load_search_limits()
    now = time.time()
    user_id_str = str(user_id)
    if user_id_str in limits:
        last_reset_time = limits[user_id_str]["reset_time"]
        search_count = limits[user_id_str]["count"]
        if now - last_reset_time > 3600:
            limits[user_id_str] = {"count": 0, "reset_time": now}
            save_search_limits(limits)
            return True
        elif search_count >= SEARCH_LIMIT:
            return False
        return True
    limits[user_id_str] = {"count": 0, "reset_time": now}
    save_search_limits(limits)
    return True

def increment_search_count(user_id):
    limits = load_search_limits()
    user_id_str = str(user_id)
    limits[user_id_str]["count"] += 1
    save_search_limits(limits)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
def build_reputation_line(query):
    counts = db.get_reaction_counts(query)
    likes = counts.get("up", 0)
    dislikes = counts.get("down", 0)
    return f'üèÖ –†–µ–ø—É—Ç–∞—Ü–∏—è: ({likes})üëç ({dislikes})üëé'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def process_phone_number(message: types.Message):
    user_id = message.from_user.id
    if not check_search_limit(user_id):
        await message.reply("‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    number = message.text.strip().replace("+", "").replace(" ", "")
    parsed_number = phonenumbers.parse("+" + number)
    if not phonenumbers.is_valid_number(parsed_number):
        await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.", parse_mode='MARKDOWN')
        return

    country = phonenumbers.region_code_for_number(parsed_number) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    operator = carrier.name_for_number(parsed_number, "ru") or "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    leak_data = send_reques(number)
    print(leak_data)
    db.log_search(user_id, number)
    search_count = db.count_unique_searches(number)
    leak_dat = format_combined_response(leak_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ callback_data
    reaction_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç", callback_data=f"react|up|{number}"),
            InlineKeyboardButton(text="üëé", callback_data=f"react|down|{number}")
        ]
    ])

    sent_msg = await message.answer(
        f'üì±\n'
        f'‚îú –ù–æ–º–µ—Ä: <i>{number}</i>\n'
        f'‚îú –°—Ç—Ä–∞–Ω–∞: <i>{country}</i>\n'
        f'‚îî –û–ø–µ—Ä–∞—Ç–æ—Ä: <i>{operator}</i>\n\n'
        f'{leak_dat}\n\n'
        f'üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {search_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n'
        f'{build_reputation_line(number)}',
        parse_mode='HTML',
        reply_markup=reaction_keyboard
    )

    increment_search_count(user_id)
    db.update_stats(user_id, phone_numbers=1, views=1, ratings=0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ email
async def process_email(message: types.Message):
    user_id = message.from_user.id
    if not check_search_limit(user_id):
        await message.reply("‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    email = message.text.strip()
    if not re.match(r'^\S+@\S+\.\S+$', email):
        await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.", parse_mode='MARKDOWN')
        return

    leak_data = send_reques(email)
    print(leak_data)
    db.log_search(user_id, email)
    search_count = db.count_unique_searches(email)
    leak_info = format_combined_response(leak_data)
    reaction_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç", callback_data=f"react|up|{email}"),
            InlineKeyboardButton(text="üëé", callback_data=f"react|down|{email}")
        ]
    ])
    sent_msg = await message.answer(
        f'‚úâÔ∏è <b>Email:</b> <i>{email}</i>\n\n'
        f'{leak_info}\n\n'
        f'üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {search_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n'
        f'{build_reputation_line(email)}',
        parse_mode='HTML',
        reply_markup=reaction_keyboard
    )
    increment_search_count(user_id)
    db.update_stats(user_id, emails=1, views=1, ratings=0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
async def process_address(message: types.Message):
    user_id = message.from_user.id
    if not check_search_limit(user_id):
        await message.reply("‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        address_query = message.text.strip()
        db.log_search(user_id, address_query)
        search_count = db.count_unique_searches(address_query)
        result = await dadata.clean("address", address_query)
        reaction_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üëç", callback_data=f"react|up|{address_query}"),
                InlineKeyboardButton(text="üëé", callback_data=f"react|down|{address_query}")
            ]
        ])
        sent_msg = await message.answer(
            f'üè† ***–ê–¥—Ä–µ—Å***\n'
            f'‚îú **–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:** `{result["result"]}`\n'
            f'‚îú **–£–ª–∏—Ü–∞:** `{result.get("street", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")}`\n'
            f'‚îú **–î–æ–º:** `{result.get("house", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")}`\n'
            f'‚îú **–ö–≤–∞—Ä—Ç–∏—Ä–∞:** `{result.get("flat", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")}`\n'
            f'‚îú **–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:** `{result.get("postal_code", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")}`\n'
            f'‚îî **–†–µ–≥–∏–æ–Ω:** `{result.get("region", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")}`\n\n'
            f'üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {search_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n'
            f'{build_reputation_line(address_query)}',
            parse_mode='MARKDOWN',
            reply_markup=reaction_keyboard
        )
        increment_search_count(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
async def process_company(message: types.Message):
    user_id = message.from_user.id
    if not check_search_limit(user_id):
        await message.reply("‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        company_name = message.text.split(maxsplit=1)[1]
        db.log_search(user_id, company_name)
        search_count = db.count_unique_searches(company_name)
        result = await dadata.suggest("party", company_name)
        if result:
            company_info = result[0]["data"]
            reaction_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç", callback_data=f"react|up|{company_name}"),
                    InlineKeyboardButton(text="üëé", callback_data=f"react|down|{company_name}")
                ]
            ])
            sent_msg = await message.answer(
                f'üèõ ***–ö–æ–º–ø–∞–Ω–∏—è***\n'
                f'‚îú **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{company_info["name"]["full_with_opf"]}`\n'
                f'‚îú **–ê–¥—Ä–µ—Å:** `{company_info["address"]["value"]}`\n'
                f'‚îú **–ò–ù–ù:** `{company_info["inn"]}`\n'
                f'‚îú **–û–ì–†–ù:** `{company_info["ogrn"]}`\n'
                f'‚îî **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** `{datetime.datetime.fromtimestamp(company_info["ogrn_date"] / 1000).strftime("%Y-%m-%d")}`\n\n'
                f'üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {search_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n'
                f'{build_reputation_line(company_name)}',
                parse_mode='MARKDOWN',
                reply_markup=reaction_keyboard
            )
            await sent_msg.edit_text(sent_msg.text, parse_mode='MARKDOWN', reply_markup=reaction_keyboard)
            increment_search_count(user_id)
        else:
            await message.answer("‚ùóÔ∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù
async def process_inn(message: types.Message):
    user_id = message.from_user.id
    if not check_search_limit(user_id):
        await message.reply("‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        inn = message.text.split(maxsplit=1)[1]
        db.log_search(user_id, inn)
        search_count = db.count_unique_searches(inn)
        result = dadata_for_inn.find_by_id("party", inn)
        if result:
            company_info = result[0]["data"]
            reaction_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç", callback_data=f"react|up|{inn}"),
                    InlineKeyboardButton(text="üëé", callback_data=f"react|down|{inn}")
                ]
            ])
            sent_msg = await message.answer(
                f'üèõ ***–ö–æ–º–ø–∞–Ω–∏—è***\n'
                f'‚îú **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{company_info["name"]["full_with_opf"]}`\n'
                f'‚îú **–ê–¥—Ä–µ—Å:** `{company_info["address"]["value"]}`\n'
                f'‚îú **–ò–ù–ù:** `{company_info["inn"]}`\n'
                f'‚îú **–û–ì–†–ù:** `{company_info["ogrn"]}`\n'
                f'‚îî **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** `{datetime.datetime.fromtimestamp(company_info["ogrn_date"] / 1000).strftime("%Y-%m-%d")}`\n\n'
                f'üëÅ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å: {search_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n'
                f'{build_reputation_line(inn)}',
                parse_mode='MARKDOWN',
                reply_markup=reaction_keyboard
            )
            await sent_msg.edit_text(sent_msg.text, parse_mode='MARKDOWN', reply_markup=reaction_keyboard)
            increment_search_count(user_id)
        else:
            await message.answer("‚ùóÔ∏è –ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ù–ù: {e}")
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π (callback query)
