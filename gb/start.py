import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from keyboards import main_keyboard, back_command_keyboard
from db import Database
from search import (
    build_reputation_line, 
    process_phone_number, 
    process_email,
    process_address, 
    process_company, 
    process_inn
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token='7227733030:AAGbLiSNeEmy1W9Gxf5N9hm3e9JVnpyVqmo',
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
db = Database('stats/database.db')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
conn = sqlite3.connect("stats/referrals.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    referrer_id INTEGER,
    referrals_count INTEGER DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS referrals (
    referrer_id INTEGER,
    referred_id INTEGER,
    FOREIGN KEY (referrer_id) REFERENCES users (user_id),
    FOREIGN KEY (referred_id) REFERENCES users (user_id)
)
""")
conn.commit()

def add_user(user_id: int, referrer_id: int = None) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."""
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, referrer_id) VALUES (?, ?)", 
            (user_id, referrer_id)
        )
        if referrer_id:
            cursor.execute(
                "UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", 
                (referrer_id,)
            )
    conn.commit()

def get_referrals_count(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    referrer_id = None

    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            if referrer_id == user_id:
                await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!")
                return
        except ValueError:
            pass

    add_user(user_id, referrer_id)

    if not db.user_exists(user_id):
        db.add_user(user_id)
        db.set_nickname(user_id, message.from_user.username)
        db.set_signup(user_id, "done")

    await message.answer(
        "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏! –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, "
        "–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∑–∞–∫–æ–Ω–Ω—ã–º –ø—É—Ç–µ–º, –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ —Ü–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞.\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=main_keyboard
    )

@dp.callback_query(lambda query: query.data == 'requests_commands')
async def show_commands(callback: CallbackQuery):
    await callback.message.answer(
        "‚¨áÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:\n\n"
        "üë§ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n"
        "‚îú  –ë–ª–æ–≥–µ—Ä (–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É)\n"
        "‚îî  –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "üöó –ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É\n"
        "‚îú  –ê777–ê–ê777 - –ø–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ –†–§\n"
        "‚îî  WDB4632761X337911 - –ø–æ–∏—Å–∫ –ø–æ VIN\n\n"
        "üë® –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "‚îú  instagram.com/username - Instagram\n"
        "‚îú  vk.com/id123456 - –í–∫–æ–Ω—Ç–∞–∫—Ç–µ\n"
        "‚îú  facebook.com/profile.php?id=1 - Facebook\n"
        "‚îú  tiktok.com/@username - Tiktok\n"
        "‚îî  ok.ru/profile/123456 - –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏\n\n"
        "üì± 79999999999 - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "üì® elonmusk@spacex.com - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Email\n"
        "üìß 12345678, @login –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∏—Å–∫ –ø–æ Telegram –∞–∫–∫–∞—É–Ω—Ç—É\n"
        "üèò 77:01:0001075:1361 - –ø–æ–∏—Å–∫ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É\n\n"
        "üìñ /tag –±–ª–æ–≥–µ—Ä - –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–∂–∫–µ\n"
        "üèõ /company –°–±–µ—Ä–±–∞–Ω–∫ - –ø–æ–∏—Å–∫ –ø–æ —é—Ä –ª–∏—Ü–∞–º\n"
        "üìë /inn 123456789123 - –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù\n"
        "üóÇ /vy 1234567890 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –∏–ª–∏ –¥–≤–æ–π–Ω–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–∞—Ö –í–ö.\n"
        "üöô –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ –Ω–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "üôÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_command_keyboard
    )

@dp.callback_query(lambda query: query.data == 'back_to_menu')
async def back_to_menu(callback: CallbackQuery):
    await callback.message.answer(
        "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏! –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, "
        "–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∑–∞–∫–æ–Ω–Ω—ã–º –ø—É—Ç–µ–º, –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ —Ü–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞.\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=main_keyboard
    )

@dp.callback_query(lambda query: query.data == 'help_ing')
async def help_ing(callback: CallbackQuery):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π –Ω–∞–º!\n@Augustusov"
    )

@dp.callback_query(lambda query: query.data == 'my_bot')
async def my_bot(callback: CallbackQuery):
    await callback.message.answer("Coming Soon")

@dp.callback_query(lambda query: query.data == 'parter')
async def parter(callback: CallbackQuery):
    me = await bot.get_me()
    count = get_referrals_count(callback.from_user.id)
    await callback.message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{me.username}?start={callback.from_user.id}\n\n"
        f"üíº –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"üë• –£ –≤–∞—Å {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    )

@dp.callback_query(lambda query: query.data == 'my_acc')
async def my_account(callback: CallbackQuery):
    user_id = callback.from_user.id
    nickname = db.get_nickname(user_id) or "–ù–µ –∑–∞–¥–∞–Ω"
    signup = db.get_signup(user_id) or "–ù–µ –∑–∞–¥–∞–Ω"
    wallet = db.get_wallet(user_id)
    partner_account = db.get_partner_account(user_id)
    query_limit = db.get_query_limit(user_id)

    stats = db.cursor.execute(
        "SELECT photos, cars, emails, phone_numbers FROM users WHERE user_id=?",
        (user_id,)
    ).fetchone()
    photos, cars, emails, phone_numbers = stats if stats else (0, 0, 0, 0)

    account_text = (
        "<b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "–í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
        f"üëÅ‚Äçüó® ID: {user_id}\n"
        f"üëÅ‚Äçüó® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {signup}\n\n"
        f"üí∂ –ú–æ–π –∫–æ—à–µ–ª—ë–∫: {wallet}\n"
        f"üí∑ –ú–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π —Å—á—ë—Ç: {partner_account}\n"
        f"‚öôÔ∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏: {query_limit}\n\n"
        "üîé –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        f"‚îú –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos}\n"
        f"‚îú –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {cars}\n"
        f"‚îú –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ—á—Ç: {emails}\n"
        f"‚îî –ù–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {phone_numbers}"
    )
    await callback.message.answer(account_text)

@dp.message(lambda message: re.match(r'^\+?\d{10,15}$', message.text))
async def phone_number_handler(message: Message):
    await process_phone_number(message)

@dp.message(lambda message: re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', message.text))
async def email_handler(message: Message):
    await process_email(message)

@dp.message(lambda message: ',' in message.text)
async def kadaster_number_handler(message: Message):
    await process_address(message)

@dp.message(Command("company"))
async def company_handler(message: Message):
    await process_company(message)

@dp.message(Command("inn"))
async def inn_handler(message: Message):
    await process_inn(message)

@dp.callback_query(lambda c: c.data and c.data.startswith("react|"))
async def reaction_handler(callback: CallbackQuery):
    parts = callback.data.split("|")
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    reaction_type, query = parts[1], parts[2]
    user_id = callback.from_user.id

    if db.reaction_exists(query, user_id):
        await callback.answer("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é.", show_alert=True)
        return

    if reaction_type == "up":
        db.update_stats(user_id, ratings=1)
    elif reaction_type == "down":
        db.update_stats(user_id, ratings=-1)

    db.add_reaction(query, user_id, reaction_type)
    await callback.answer("–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è —É—á—Ç–µ–Ω–∞!")

    new_rep = build_reputation_line(query)
    new_text = re.sub(r"üèÖ –†–µ–ø—É—Ç–∞—Ü–∏—è: \(\d+\)üëç \(\d+\)üëé", new_rep, callback.message.text)
    await callback.message.edit_text(
        new_text,
        reply_markup=callback.message.reply_markup
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())